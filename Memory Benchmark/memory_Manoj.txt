#include<stdio.h>
#include<stdlib.h>
#include<sys/time.h>
#include<pthread.h>
#include <string.h>
#define DCACHE_SIZE (1024*1024*8)
int thrdcount=0,k=0;

void dummy_byte(void *);
void dummy_kb(void *);
void dummy_mb(void *);

void rand_byte(void *);
void rand_kb(void *);
void rand_mb(void *);

void main()
{
	int choice;
	pthread_t thread1,thread2;
	clock_t startTime,endTime;
	
	while(1)
	{
			printf("1.Sequential Access  2.Random Access 3.Exit\n");
			printf("Enter your choice\n");
			scanf("%d",&choice);
			switch(choice)
			{

			case 1:
			printf("Enter the number of threads to run");
			scanf("%d",&thrdcount);
			
				startTime=clock();
				if(thrdcount==1){
                                pthread_create(&thread1,NULL,dummy_byte,NULL);
                                pthread_join(thread1,NULL);
				} 
				else if(thrdcount == 2){
				pthread_create(&thread1,NULL,dummy_byte,NULL);
				pthread_create(&thread2,NULL,dummy_byte,NULL);
                                pthread_join(thread1,NULL);
				pthread_join(thread2,NULL);
				}
				else{printf("Please enter less than two thread\n \n");break;}
                                endTime=clock();
			
			printf("The time for 1B block size is %lf \n",(double)(endTime-startTime)/10000);
			printf("Throughput for 1B block size in sequential read for %d thread is %lf MB/sec\n ",&thrdcount,(20971520)/((double)(endTime-startTime)/10000));

			startTime=clock();
				if(thrdcount==1){
                                pthread_create(&thread1,NULL,dummy_kb,NULL);
                                pthread_join(thread1,NULL);
				} 
				else if(thrdcount == 2){
				pthread_create(&thread1,NULL,dummy_kb,NULL);
				pthread_create(&thread2,NULL,dummy_kb,NULL);
                                pthread_join(thread1,NULL);
				pthread_join(thread2,NULL);
				}
				else{printf("Please enter less than two thread\n \n");break;}
                                endTime=clock();
            printf("The time for 1KB block size is %lf \n",(double)(endTime-startTime)/1000);
	    printf("Throughput for 1KB block size in sequential read for %d thread is %lf MB/sec\n",&thrdcount,(20971520)/((double)(endTime-startTime)/1000));

			startTime=clock();
				if(thrdcount==1){
                                pthread_create(&thread1,NULL,dummy_mb,NULL);
                                pthread_join(thread1,NULL);
				} 
				else if(thrdcount == 2){
				pthread_create(&thread1,NULL,dummy_mb,NULL);
				pthread_create(&thread2,NULL,dummy_mb,NULL);
                                pthread_join(thread1,NULL);
				pthread_join(thread2,NULL);
				}
				else{printf("Please enter less than two thread\n \n");break;}
                                endTime=clock();
            printf("The time for 1MB block size is %lf  \n",(double)(endTime-startTime));
            printf("Throughput for 1MB block size in sequential read for %d thread is %lf MB/sec\n ",&thrdcount,(20)/((double)(endTime-startTime)));
break;




			case 2:
			printf("Enter the number of threads to run");
			scanf("%d",&thrdcount);
			
			startTime=clock();
				if(thrdcount==1){
                                pthread_create(&thread1,NULL,rand_byte,NULL);
                                pthread_join(thread1,NULL);
				} 
				else if(thrdcount == 2){
				pthread_create(&thread1,NULL,rand_byte,NULL);
				pthread_create(&thread2,NULL,rand_byte,NULL);
                                pthread_join(thread1,NULL);
				pthread_join(thread2,NULL);
				}
				else{printf("Please enter less than two thread\n \n");break;}
                                endTime=clock();
			
			printf("The time for 1B block size is %lf \n",(double)(endTime-startTime)/10000);
			printf("Throughput for 1B block size in Random read for %d thread is %lf MB/sec\n ",&thrdcount,(20971520)/((double)(endTime-startTime)/10000));

			startTime=clock();
				if(thrdcount==1){
                                pthread_create(&thread1,NULL,rand_kb,NULL);
                                pthread_join(thread1,NULL);
				} 
				else if(thrdcount == 2){
				pthread_create(&thread1,NULL,rand_kb,NULL);
				pthread_create(&thread2,NULL,rand_kb,NULL);
                                pthread_join(thread1,NULL);
				pthread_join(thread2,NULL);
				}
				else{printf("Please enter less than two thread\n \n");break;}
                                endTime=clock();
            printf("The time for 1KB block size is %lf \n",(double)(endTime-startTime)/1000);
	    printf("Throughput for 1KB block size in Random read for %d thread is %lf MB/sec\n",&thrdcount,(20480)/((double)(endTime-startTime)/1000));

			startTime=clock();
				if(thrdcount==1){
                                pthread_create(&thread1,NULL,rand_mb,NULL);
                                pthread_join(thread1,NULL);
				} 
				else if(thrdcount == 2){
				pthread_create(&thread1,NULL,rand_mb,NULL);
				pthread_create(&thread2,NULL,rand_mb,NULL);
                                pthread_join(thread1,NULL);
				pthread_join(thread2,NULL);
				}
				else{printf("Please enter less than two thread\n \n");break;}
                                endTime=clock();
            printf("The time for 1MB block size is %lf  \n",(double)(endTime-startTime));
            printf("Throughput for 1MB block size in Random read for  thread is %lf MB/sec\n ",&thrdcount,(20)/((double)(endTime-startTime)));
break;


            default : exit(0);
            break;
        }
    }
}

void dummy_byte(void* param)
{
char *array1, *array2, *temp;
size_t index, count;
int i;

array1 = malloc(5*DCACHE_SIZE);
array2 = malloc(5*DCACHE_SIZE);

/*
temp=array1;
        for(i=0;i<20971520;i++)
        {
                *temp='a';
                temp++;
        }
                array1=temp;*/
                for(i=0;i<20971520;i++)
                {
                        memcpy(&array2[i], &array1[i], 1);
                }
	
}

void dummy_kb(void* param)
{
char *array1, *array2, *temp;
size_t index, count;
long i;

array1 = malloc(5*DCACHE_SIZE);
array2 = malloc(5*DCACHE_SIZE);


/*temp=array1;
        for(i=0;i<20480;i++)
        {
                *temp='a';
                temp++;
        }
              array1=temp;*/
                for(i=0;i<20971520;i++)
                {
                        memcpy(&array2[i],&array1[i], 1024);
                }

}


void dummy_mb(void* param)
{
char *array1, *array2, *temp;
size_t index, count;
long i;

array1 = malloc(5*DCACHE_SIZE);
array2 = malloc(5*DCACHE_SIZE);


/*temp=array1;
        for(i=0;i<1048576;i++)
        {
                *temp='a';
                temp++;
        }
          */      
                for(i=0;i<20;i++)
                {
                        memcpy(&array2[i], &array1[i], 1048576);
                }

}


void rand_byte(void* param)
{
char *array1, *array2, *temp;
size_t index, count;
long i;
int k;

array1 = malloc(5*DCACHE_SIZE);
array2 = malloc(5*DCACHE_SIZE);


temp=array1;
       /* for(i=0;i<20971520;i++)
        {
                *temp='a';
                temp++;
        }
                array1=temp;*/
                for(i=0;i<20971520;i++)
                {
                        k=rand()%100;
			memcpy(&array2[i], &array1[k], 1);
                }
	
}

void rand_kb(void* param)
{
char *array1, *array2, *temp;
size_t index, count;
long i;
int k;

array1 = malloc(5*DCACHE_SIZE);
array2 = malloc(5*DCACHE_SIZE);


temp=array1;
        /*for(i=0;i<20971520;i++)
        {
                *temp='a';
                temp++;
        }*/
              
                for(i=0;i<20480;i++)
                {
                        k=rand()%100;
			memcpy(&array2[i], &array1[k], 1024);
                }

}


void rand_mb(void* param)
{
char *array1, *array2, *temp;
size_t index, count;
long i;
int k;

array1 = malloc(5*DCACHE_SIZE);
array2 = malloc(5*DCACHE_SIZE);


temp=array1;
        /*for(i=0;i<20971520;i++)
        {
                *temp='a';
                temp++;
        }*/
                
                for(i=0;i<20;i++)
                {
                        k=rand()%100;
			memcpy(&array2[i], &array1[k], 1048576);
                }

}
